SET SEARCH_PATH TO DNA_ETL;

drop table if exists dna_rnf.account_industry_map;
create table dna_rnf.account_industry_map as (
    select column1 as industry_category, column2 as industry_fine from (VALUES
        ('Tech', ARRAY['Communications', 'Electronics', 'Services', 'Technology','Telecommunications']),
        ('Healthcare', ARRAY['Biotechnology', 'Healthcare', 'Healthcare Providers']),
        ('Insurance', ARRAY['Insurance']),
        ('Financial Services', ARRAY['Banking', 'Finance', 'Financial']),
        ('Manufacturing', ARRAY['Engineering', 'Machinery', 'Manufacturing']),
        ('Utilities', ARRAY['Utilities']),
        ('Retail', ARRAY['Apparel', 'Retail']),
        ('Media & Entertainment', ARRAY['Communications & Media', 'Entertainment']),
        ('Education', ARRAY['Education', 'Education - Higher Ed', 'Education - K-12']),
        ('Public Sector', ARRAY['Federal Government', 'Government', 'Local Government', 'State Government']),
        ('Other', ARRAY['Agriculture', 'Commercial', 'Construction', 'Consulting','Energy',
                  'Hospitality', 'Natural Resources', 'Not For Profit', 'Other',
                  'Recreation', 'Special District', 'Transportation', 'Unclassified',
                  'Wholesale Trade'])) v);

drop table if exists dna_rnf.competitor_map;
create table dna_rnf.competitor_map as (
    select column1 as competitor_category, column2 as competitor_name from (VALUES
        ('Modern', ARRAY['Cohesity', 'Veeam']),
        ('Traditional', ARRAY['Avamar', 'CommVault', 'DataDomain']),
        ('Other', ARRAY['Actifio','Arcserve','BackupExec','DellEMC DPS (Data Protection Suite)',
          'Druva','ExaGrid','HPE Data Protector \\ MicroFocus Data Protector',
          'IBM Spectrum Protect','IDPA','Microsoft DPM','NetApp(Alta Vault)',
          'NetBackup','Networker','Other','TSM','Unitrends','Zerto']),
        ('No Competitor', ARRAY['Do Nothing', 'No Competitor', 'Not Sure'])) v);   


        
drop table if exists dna_rnf.incumbent_map;
create table dna_rnf.incumbent_map as (
    select column1 as incumbent_category, column2 as incumbent_name from (VALUES
        ('Modern',  ARRAY['Cohesity', 'Rubrik', 'Veeam']),
        ('Traditional',  ARRAY['CommVault','DellEMC Avamar','DellEMC DataDomain','DellEMC Networker',
                'IBM Spectrum Protect','Veritas BackupExec','Veritas NetBackup']),
        ('Other',  ARRAY['Actifio','Arcserve','DellEMC DPS (Data Protection Suite)',
          'DellEMC IDPA','DellEMC PowerProtect','Druva','Exagrid',
          'HPE Data Protector (MicroFocus)','IBM Spectrum Protect (TSM)',
          'Igneous','Microsoft DPM / Azure Backup','NetApp',
          'Other','Unitrends','Zerto']),
        ('No Incumbent',  ARRAY['Greenfield', 'No Incumbent', 'Not Sure'])) v); 
        

        
DROP TABLE IF EXISTS DNA_RNF.RNF_USER;
CREATE TABLE DNA_RNF.RNF_USER AS
SELECT DISTINCT ID::TEXT AS USER_ID,
    TITLE::TEXT,
    BADGE_TEXT::TEXT,
    IS_ACTIVE::BOOLEAN,
    USER_TYPE::TEXT,
    MANAGER_ID::TEXT,
    CONTACT_ID::TEXT,
    PARTNER_TYPE_C::TEXT,
    ACCOUNT_ID::TEXT
FROM SFDC_USER;


DROP TABLE IF EXISTS DNA_RNF.RNF_CONTACT;
CREATE TABLE DNA_RNF.RNF_CONTACT AS
SELECT DISTINCT ID::TEXT AS CONTACT_ID,
    CONTACT_ID_18_C::TEXT AS CONTACT_ID_18_C,
    INDIVIDUAL_ID::TEXT AS INDIVIDUAL_ID,
    ACCOUNT_ID::TEXT as ACCOUNT_ID,
    IS_PARTNER_CONTACT_C::BOOLEAN AS IS_PARTNER_CONTACT_C,
    LEAD_SOURCE::TEXT AS LEAD_SOURCE,
    LEAD_LIFECYCLE_C::TEXT AS LEAD_LIFECYCLE_C,
    LEAD_SOURCE_MOST_RECENT_C AS LEAD_SOURCE_MOST_RECENT_C,
    TITLE::TEXT,
    CONTACT_STATUS_C::TEXT AS CONTACT_STATUS_C,
    CREATED_BY_ID::TEXT AS CREATED_BY_ID,
    CREATED_DATE::TIMESTAMP WITHOUT TIME ZONE AS CONTACT_CREATED_DATE,
    MKTO_SI_LAST_INTERESTING_MOMENT_DESC_C::TEXT AS MKTO_SI_LAST_IA_DESC,
    MKTO_SI_LAST_INTERESTING_MOMENT_SOURCE_C::TEXT AS MKTO_SI_LAST_IA_SOURCE,
    OPPORTUNITY_SOURCE_C::TEXT AS OPPORTUNITY_SOURCE_C
FROM SFDC_CONTACT;


DROP TABLE IF EXISTS DNA_RNF.RNF_EVENT;
CREATE TABLE DNA_RNF.RNF_EVENT AS
SELECT
    ROW_NUMBER() OVER(ORDER BY ACTIVITY_DATE,ACCOUNT_ID) as EVENT_ID,
    *
FROM
    (SELECT DISTINCT 
        ACCOUNT_ID::TEXT AS ACCOUNT_ID,
        ACTIVITY_DATE::TIMESTAMP WITHOUT TIME ZONE AS ACTIVITY_DATE,
        TYPE::TEXT AS EVENT_TYPE, 
        POST_MEETING_STATUS_C::TEXT AS EVENT_POST_MEETING_STATUS_C,
        DIVISION_C::TEXT AS EVENT_DIVISION_C,
        DID_THE_MEETING_TAKE_PLACE_FORMULA_C::TEXT AS EVENT_DID_THE_MEETING_TAKE_PLACE_FORMULA_C,
        WHO_ID::TEXT as EVENT_WHO_ID
    FROM 
        SFDC_EVENT
    WHERE
        ACCOUNT_ID IS NOT NULL AND NOT IS_DELETED::BOOLEAN
    ) T;

DROP TABLE IF EXISTS DNA_RNF.RNF_ACCOUNT;
CREATE TABLE DNA_RNF.RNF_ACCOUNT AS
SELECT DISTINCT ID::TEXT AS ACCOUNT_ID,
    CREATED_DATE::TIMESTAMP WITHOUT TIME ZONE AS ACCOUNT_CREATED_DATE,
    OWNER_THEATER_C::TEXT AS DNA_CUSTOM_AC_OWNER_THEATER,
    ANNUAL_REVENUE::DOUBLE PRECISION AS DNA_STD_AC_ANNUAL_REVENUE,
    NUMBER_OF_EMPLOYEES::BIGINT AS DNA_STD_AC_NUMBER_OF_EMPLOYEES,
    INDUSTRY::TEXT AS DNA_STD_AC_INDUSTRY,
    INDUSTRY_CATEGORY::TEXT AS DNA_STD_AC_INDUSTRY_GROUPS
FROM SFDC_ACCOUNT a
LEFT JOIN dna_rnf.ACCOUNT_INDUSTRY_MAP m ON a.INDUSTRY = ANY(m.INDUSTRY_FINE) AND NOT a.IS_DELETED::BOOLEAN;


DROP TABLE IF EXISTS DNA_RNF.RNF_OPPORTUNITY;

CREATE TABLE DNA_RNF.RNF_OPPORTUNITY AS
SELECT DISTINCT 
    ID::TEXT AS OPPORTUNITY_ID,  
    ACCOUNT_ID::TEXT AS OPPORTUNITY_ACCOUNT_ID,
    CREATED_DATE::TIMESTAMP WITHOUT TIME ZONE AS OPPORTUNITY_CREATED_DATE, 
    CLOSE_DATE::TIMESTAMP WITHOUT TIME ZONE AS OPPORTUNITY_CLOSED_DATE, 
    AMOUNT::DOUBLE PRECISION AS DNA_STD_DC_AMOUNT,
    LEAD_SOURCE::TEXT AS DNA_STD_DC_LEAD_SOURCE,
    IS_WON::BOOLEAN AS DNA_STD_DC_END_RESULT,
    SEGMENT_C::TEXT AS DNA_CUSTOM_DC_SEGMENT,
    PRIMARY_COMPETITOR_C::TEXT AS DNA_CUSTOM_DC_PRIMARY_COMPETITOR,
    INCUMBENT_C::TEXT AS DNA_CUSTOM_DC_INCUMBENT,
    SDR_LED_C::BOOLEAN AS DNA_CUSTOM_DC_SDR_LED, 
    ISR_LED_C::BOOLEAN AS DNA_CUSTOM_DC_ISR_LED,
    POC_START_DATE_C::TIMESTAMP WITHOUT TIME ZONE AS DNA_CUSTOM_IA_START_DATE_POC, 
    POC_END_DATE_C::TIMESTAMP WITHOUT TIME ZONE AS DNA_CUSTOM_IA_END_DATE_POC,
    STAGE_NAME::TEXT AS DNA_STD_DC_OPPTY_STAGE_NAME,
    PROBABILITY::DOUBLE PRECISION AS DNA_STD_DC_OPPTY_PROBABILITY,
    -- LATTICE_SCORE_C::TEXT AS DNA_CUSTOM_AC_LATTICE_SCORE,
    COMPETITOR_CATEGORY::TEXT AS DNA_CUSTOM_DC_PRIMARY_COMPETITOR_GROUPS,
    INCUMBENT_CATEGORY::TEXT DNA_CUSTOM_DC_INCUMBENT_GROUPS,
    TLEVEL_1_C::TEXT AS TLEVEL_1_C,
    TLEVEL_2_C::TEXT AS TLEVEL_2_C,
    TLEVEL_3_C::TEXT AS TLEVEL_3_C,
    TLEVEL_4_C::TEXT AS TLEVEL_4_C,
    PARTNER_LEVEL_OF_INVOLVEMENT_CALC_C::TEXT AS PARTNER_LEVEL_OF_INVOLVEMENT_CALC_C,
    OWNER_ID::TEXT AS OWNER_ID,
    ESTIMATED_CLOSE_DATE_C::TEXT AS ESTIMATED_CLOSE_DATE_C,
    OPPORTUNITY_SUB_TYPE_C::TEXT AS OPPORTUNITY_SUB_TYPE_C,
    ACCOUNT_OWNERS_MANAGER_C,
    ACTIVE_OWNER_C,
    ADVANCED_PAST_STAGE_1_C,
    ADVANCED_PAST_STAGE_1_DATE_TIME_C,
    ADVANCED_PAST_STAGE_2_C,
    ADVANCED_PAST_STAGE_2_DATE_TIME_C,
    AGE_FORMULA_C,
    AREA_C,
    AREA_VP_NOTES_C,
    AREA_VP_NOTES_TIMESTAMP_C,
    CAMPAIGN_ID,
    CONVERTED_FROM_LEAD_C,
    CORRECTIVE_ACTIONS_NEEDED_C,
    CORRECTIVE_ACTIONS_TAKEN_C,
    COUNT_C,
    CREATED_BY_ID,
    CURRENT_BACKUP_VENDOR_C,
    CURRENT_INTEREST_LEVEL_C,
    CURRENT_SOLUTION_C,
    CURRENT_STATE_C,
    CURRENT_STATE_DATE_TIME_C,
    CURRENT_STORAGE_VENDOR_C,
    CUSTOMER_GOALS_AND_OBJECTIVES_C,
    DATE_LAST_ESCALATION_STAGE_CHANGE_C,
    DAYS_IN_BUSINESS_JUSTIFICATION_C,
    DAYS_IN_CONSENSUS_C,
    DAYS_IN_DISCOVERY_C,
    DAYS_IN_NEGOTIATE_CLOSE_C,
    DAYS_IN_PO_WITH_CHANNEL_C,
    DAYS_IN_TECHNICAL_VALIDATION_C,
    DAYS_SINCE_LAST_TECH_VAL_UPDATE_C,
    DEAL_BAND_C,
    DEAL_DESK_JUSTIFICATION_C,
    DEAL_IMPACT_C,
    DEAL_REG_APPROVAL_STATUS_C,
    DEAL_REG_APPROVAL_TIMESTAMP_C,
    DEAL_REG_EXPIRATION_DATE_C,
    DEAL_REG_SUBMITTED_DATE_C,
    DEAL_REGISTRATION_TYPE_C,
    DEAL_UPDATES_C,
    DECISION_CRITERIA_C,
    DECISION_PROCESS_C,
    DESCRIPTION,
    DISCOVERY_GRADE_C,
    DISCOVERY_POINTS_C,
    DIVISION_C,
    ESCALATION_STAGE_C,
    FISCAL,
    FISCAL_QUARTER,
    FISCAL_YEAR,
    FUTURE_STATE_C,
    HAS_OPEN_ACTIVITY,
    HAS_OVERDUE_TASK,
    HOURS_IN_BUSINESS_JUSTIFICATION_C,
    HOURS_IN_CONSENSUS_C,
    HOURS_IN_DISCOVERY_C,
    HOURS_IN_NEGOTIATE_CLOSE_C,
    HOURS_IN_PO_WITH_CHANNEL_C,
    HOURS_IN_TECHNICAL_VALIDATION_C,
    IDENTIFIED_PAIN_C,
    INDUSTRY_VALUE_C,
    INITIAL_CONTACT_ID_C,
    IS_CDW_C,
    IS_CDW_GLOBAL_C,
    IS_CLOSED,
    IS_DELETED,
    IS_EXCLUDED_FROM_TERRITORY_2_FILTER,
    IS_L_3_ELIGIBLE_ACCOUNT_C,
    IS_ORDER_SPLIT_C,
    IS_PRIVATE,
    ISR_LEVEL_OF_INFLUENCE_C,
    ISR_OWNER_C,
    ISR_SDR_OPPTY_CREDIT_STAGE_C,
    ISR_SDR_OPPTY_CREDIT_TOTAL_C,
    ISR_SDR_OPPTY_CREDIT_UPDATE_C,
    ISR_SDR_OPPTY_CREDIT_VM_COUNT_C,
    ISR_SDR_R_2_K_POINTS_C,
    ISRCREDIT_TOTAL_C,
    ISSUE_TRACKER_COUNT_OPEN_BLOCKER_C,
    ISSUE_TRACKER_COUNT_OPEN_MAJOR_C,
    JOB_LEVEL_C,
    KEY_FEATURE_NEEDS_C,
    L_3_PRODUCT_COUNT_C,
    LAST_ACTIVITY_DATE,
    LAST_MODIFIED_BY_ID,
    LAST_MODIFIED_DATE,
    LAST_STAGE_UPDATE_DATE_C,
    LEAD_SOURCE_CAMPAIGN_DETAILS_C,
    LEAN_DATA_DAYS_IN_STAGE_C,
    LEAN_DATA_DAYS_TO_CLOSE_C,
    LEAN_DATA_REPORTING_LAST_RUN_DATE_C,
    LEAN_DATA_REPORTING_OPPORTUNITY_SOURCE_C,
    LEAN_DATA_REPORTING_TOTAL_MARKETING_TOUCHES_C,
    LEAN_DATA_REPORTING_WON_NUMBER_C,
    LID_IS_INFLUENCED_C,
    LOST_REASON_C,
    LOST_TO_C,
    LOST_TO_WON_AGAINST_C,
    MANAGER_NOTE_DATE_TIME_C,
    MANAGER_S_NOTE_C,
    METRIC_C,
    NEED_C,
    NEEDS_C,
    NEGATIVE_CONSEQUENCES_C,
    NEW_STAGE_C,
    NEXT_CLOSE_DATE_REMINDER_DATE_C,
    NEXT_REMINDER_DATE_C,
    NEXT_STEP_C,
    NEXT_STEP_DATE_TIME_C,
    NO_OF_PLATFORM_PRODUCTS_C,
    NUMBER_AZURE_PRODUCTS_C,
    NUMBER_OF_CLUOD_CLUSTER_PRODUCTS_C,
    NUMBER_OF_CLUOD_ON_PRODUCTS_C,
    NUMBER_OF_INACTIVE_PRODUCTS_C,
    NUMBER_OF_NFR_PRODUCTS_C,
    NUMBER_OF_OPPORTUNITY_PRODUCTS_C,
    NUMBER_OF_PRIMARY_TECHNICAL_CONTACT_C,
    NUMBER_OF_PROTECTED_MACHINES_C,
    NUMBER_OF_PSO_PRODUCTS_C,
    NUMBER_OF_TB_C,
    OASIS_LAB_USAGE_C,
    OF_DATA_C,
    OF_GO_LINES_C,
    OF_OPPS_C,
    OF_P_O_C_UNITS_C,
    OF_PHYSICAL_SERVERS_C,
    OF_VMS_C,
    OPP_OWNER_ACCOUNT_OWNER_C,
    OPPORTUNITY_COUNT_C,
    OPPORTUNITY_DETAILS_C,
    OPPORTUNITY_ID_18_CHARACTERS_C,
    OPPORTUNITY_LEAD_OWNER_ID_C,
    OPPORTUNITY_OWNERS_MANAGER_C,
    OPPORTUNITY_RENEWAL_STATUS_C,
    OPPORTUNITY_SOURCE_C,
    OPPORTUNITY_TYPE_C,
    ORIGINAL_LEAD_OWNER_ACTIVE_C,
    ORIGINAL_LEAD_OWNER_C,
    ORIGINAL_LEAD_OWNER_THEATRE_C,
    ORIGINAL_LEAD_OWNERS_ROLE_C,
    ORIGINAL_LEAD_SOURCE_C,
    OTHER_COMPETITOR_FIELD_C,
    OTHER_INCUMBENT_C,
    OTHER_KEY_FEATURE_NEED_C,
    OTHER_PRIMARY_COMPETITOR_C,
    OUTLIER_C,
    OWNER_AREA_C,
    OWNER_REGION_C,
    OWNER_SALES_LEVEL_C,
    OWNER_SUB_REGION_C,
    OWNER_THEATRE_C,
    OWNERS_SUB_REGION_C,
    OWNERSHIP_CHANGE_COUNTER_C,
    PAIN_POINTS_C,
    PARTNER_C,
    PARTNER_CONNECT_C,
    PARTNER_LEVEL_OF_INVOLVEMENT_C,
    PARTNER_LOOKUP_C,
    PARTNER_PARENT_C,
    PARTNER_REP_TITLE_C,
    PARTNER_TECHNICAL_CONTRIBUTION_C,
    PHYSICAL_OPERATING_SYSTEMS_C,
    PHYSICAL_STORAGE_C,
    PM_UPDATE_ON_MISSING_FEATURE_C,
    PO_NOTIFICATION_SENT_TIMESTAMP_C,
    PO_RECEIVED_NOTIFICATION_SENT_C,
    POC_BUY_BACK_AS_NFR_C,
    POC_C,
    POC_CONVERSION_C,
    POC_CONVERTED_C,
    POC_HEALTH_C,
    POC_OASIS_C,
    POC_PHASE_C,
    POC_RETURN_STATUS_C,
    POC_STAGE_C,
    POCCONVERTED_C,
    POSITIVE_BUSINESS_OUTCOMES_C,
    PREVIOUS_ACCOUNT_OWNER_C,
    PREVIOUS_OWNER_C,
    PRIMARY_QUOTE_APPROVAL_STATUS_C,
    PRIMARY_STORAGE_C,
    PRIMARY_STORAGE_CAPACITY_C,
    PRIMARY_STORAGE_IOPS_C,
    PRIOR_STAGE_DATE_C,
    PRODUCT_ARGUMENTS_C,
    PRODUCT_GAPS_C,
    PRODUCTS_WITH_BUNDLE_FEATURE_CLOUD_ON_C,
    PSO_SERVICES_AMOUNT_C,
    PSO_SKU_ADDED_C,
    PURCHASE_TIMEFRAME_C,
    PUSH_COUNTER_C,
    PUSHED_DEAL_C,
    QBDIALER_DIALS_C,
    R_2_KMASTER_C,
    REASON_DEAL_FELL_THROUGH_C,
    REGION_C,
    RFP_C,
    RISK_IDENTIFIED_C,
    RISK_IDENTIFIED_DATE_C,
    RISKS_UNCERTAINTIES_C,
    RSM_HAS_REVIEWED_REVERSE_TIMELINE_C,
    RUBRIK_SALES_ENGINEER_C,
    SALES_OPS_DEAL_NOTES_C,
    SALES_REGION_C,
    SDR_LED_CHECKED_DATE_C,
    SDRCREDIT_TOTAL_C,
    SEGMENT_REVENUE_C,
    SIZING_ATTACHMENT_STATUS_C,
    STAGE_1_AGE_VIOLATION_C,
    STAGE_1_AGE_VIOLATION_DATE_C,
    STAGE_1_AGE_VIOLATION_DATE_TIME_C,
    STAGE_6_TIME_STAMP_C,
    STAGE_CHANGED_DATE_C,
    STAGE_LOST_FROM_C,
    STAGNANT_45_DAYS_C,
    STAGNANT_C,
    STAGNANT_NEW_C,
    STRATEGIC_ACCOUNT_C,
    SUB_REGION_C,
    SUBSCRIPTION_END_DATE_C,
    SUBSCRIPTION_START_DATE_C,
    SUCCESS_CRITERIA_C,
    SYSTEM_MODSTAMP,
    TECHNICAL_VALIDATION_C,
    TECHNICAL_VALIDATION_COMPLETED_C,
    TECHNICAL_VALIDATION_LAST_TOUCH_C,
    TECHNICAL_VALIDATION_NEXT_STEP_C,
    TECHNOLOGY_NOTES_C_C,
    TERRITORY_2_ID,
    THEATER_VP_NOTES_C,
    THEATER_VP_NOTES_TIMESTAMP_C,
    THEATRE_C,
    TIME_OF_LAST_STAGE_CHANGE_C,
    TOTAL_OPPORTUNITY_QUANTITY,
    TYPE,
    WHAT_COULD_WE_DO_DIFFERENTLY_C,
    WHAT_DID_WE_DO_WELL_C,
    WHAT_DID_WE_THINK_WOULD_HAPPEN_C,
    WHAT_DIDN_T_WORK_C,
    WHAT_REALLY_HAPPENED_C,
    WHAT_WAS_THE_DIFFERENCE_C,
    WHAT_WORKED_WELL_C,
    WHAT_WOULD_WE_DO_DIFFERENT_NEXT_TIME_C,
    WHY_DO_ANYTHING_C,
    WHY_NOW_C,
    WHY_RUBRIK_C,
    WIN_ALERT_SENT_C,
    WIN_ALERT_SENT_TIME_STAMP_C,
    WIN_DATE_HIDDEN_C,
    WIN_LOSS_COMMENTS_C,
    WIN_NOTES_C,
    WIN_NOTIFICATION_ADDITIONAL_INFO_C,
    WIN_REASONS_C,
    X_52_WEEK_CHALLENGE_C
FROM 
(SELECT o.*, u.TLEVEL_1_C, u.TLEVEL_2_C, u.TLEVEL_3_C, u.TLEVEL_4_C, l.LATTICE_SCORE_C
 FROM SFDC_OPPORTUNITY o 
  LEFT JOIN SFDC_USER u ON o.OWNER_ID = u.ID 
  LEFT JOIN SFDC_LEAD l ON o.ID = l.CONVERTED_OPPORTUNITY_ID  
 WHERE NOT o.IS_DELETED::BOOLEAN) T 
LEFT JOIN DNA_RNF.COMPETITOR_MAP ON PRIMARY_COMPETITOR_C = ANY(COMPETITOR_NAME)
LEFT JOIN DNA_RNF.INCUMBENT_MAP ON INCUMBENT_C = ANY(INCUMBENT_NAME);


DROP TABLE IF EXISTS DNA_RNF.RNF_TASK_OPPORTUNITY;

CREATE TABLE DNA_RNF.RNF_TASK_OPPORTUNITY AS
SELECT DISTINCT ID::TEXT AS TASK_ID,
    ACCOUNT_ID::TEXT AS ACCOUNT_ID,
    OPPORTUNITY_ID::TEXT AS OPPORTUNITY_ID,
    ACTIVITY_TYPE_C::TEXT AS ACTIVITY_TYPE_C,
    ACTIVITY_DATE::TIMESTAMP WITHOUT TIME ZONE AS ACTIVITY_DATE,
    STATUS::TEXT AS STATUS, 
    TASK_SUBTYPE::TEXT AS TASK_SUBTYPE,
    CREATED_BY_ROLE_NAME_C::TEXT AS CREATED_BY_ROLE_NAME_C,
    WHO_ID::TEXT as WHO_ID
FROM (
select o.id as opportunity_id, t.* 
from SFDC_TASK t, SFDC_OPPORTUNITY o
where not t.is_deleted::BOOLEAN and not o.is_deleted::BOOLEAN
and t.account_id = o.account_id
and t.what_id = o.id) T;


DROP TABLE IF EXISTS DNA_RNF.RNF_TASK_ACCOUNT;

CREATE TABLE DNA_RNF.RNF_TASK_ACCOUNT AS
SELECT DISTINCT ID::TEXT AS TASK_ID,
    ACCOUNT_ID::TEXT AS ACCOUNT_ID,
    NULL::TEXT AS OPPORTUNITY_ID,
    ACTIVITY_TYPE_C::TEXT AS ACTIVITY_TYPE_C,
    ACTIVITY_DATE::TIMESTAMP WITHOUT TIME ZONE AS ACTIVITY_DATE,
    STATUS::TEXT AS STATUS, 
    TASK_SUBTYPE::TEXT AS TASK_SUBTYPE,
    CREATED_BY_ROLE_NAME_C::TEXT AS CREATED_BY_ROLE_NAME_C,
    WHO_ID::TEXT as WHO_ID
FROM (
select t.* from SFDC_TASK t, SFDC_ACCOUNT a
where not a.is_deleted::BOOLEAN and not t.is_deleted::BOOLEAN and
t.account_id = a.id and a.id in (
select account_id from SFDC_OPPORTUNITY where not is_deleted::BOOLEAN
)) T;


drop table if exists dna_rnf.RNF_MOMENTS;
create table dna_rnf.RNF_MOMENTS AS
WITH _actions as (
  SELECT action from 
      UNNEST(ARRAY['register', 'visit', 'rsvp', 'attend', 'fill', 'download', 'respond', 
             'refer', 'schedule', 'member', 'invite', 'convert', 'synd', 'click', 
             'open', 'lead gen', 'access']) action
),

_categories as (
    SELECT category from 
    UNNEST(ARRAY['conference', 'booth', 'tradeshow', 'webinar', 'poc', 'trial', 'wp', 
              'white paper', 'content', 'ebook', 'contact sales', 'field', 'event', 'promo', 
              'social', 'channel', 'program', 'asset', 'product interest']) category
)

SELECT
  ROW_NUMBER() OVER (ORDER BY ACTIVITY_DATE, ACCOUNT_ID) as MOMENT_ID,
  -- ROW_NUMBER() OVER (PARTITION BY ACCOUNT_ID, ACTIVITY_DATE, DESCRIPTION) as SAME_MOMENT_ID,
  *
FROM (
  SELECT DISTINCT 
      ACCOUNT_ID::TEXT AS ACCOUNT_ID,
      ACTIVITY_DATE::TIMESTAMP WITHOUT TIME ZONE AS ACTIVITY_DATE,
      CONCAT(action, '__', category) AS MOMENT_DESCRIPTION_KEYWORDS,
      DESCRIPTION,
      LEAD_ID::TEXT as MOMENT_WHO_ID,
      COALESCE(ACTION,NULL) AS ACTION,
      COALESCE(CATEGORY,NULL) AS CATEGORY
  FROM (
		select a.id as account_id, im.*, ml.SFDC_CONTACT_ID as CONTACT_ID
		from 
		mkto_activity_interesting_moment im, mkto_lead ml, sfdc_account a
		where not a.is_deleted::BOOLEAN
		and im.lead_id = ml.id and ml.sfdc_account_id = a.id and a.id in (
		select account_id from sfdc_opportunity where not is_deleted::BOOLEAN
		)
  ) T
  LEFT JOIN _actions
  ON 
      description ILIKE '%'||action||'%' 
  LEFT JOIN _categories
  ON 
      description ILIKE '%'||category||'%'
) _temp;
